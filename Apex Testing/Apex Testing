//  Create an Apex elegance to check if a date is inside a right range, and if not, returns a date that happens on the give up of the month in the range.

First create an apex class named VerifyDate:

public class VerifyDate {
  
   //method to handle potential checks against two dates
   public static Date CheckDates(Date date1, Date date2) {
       //if date2 is within the next 30 days of date1, use date2.  Otherwise use the end of the month
       if(DateWithin30Days(date1,date2)) {
           return date2;
       } else {
           return SetEndOfMonthDate(date1);
       }
   }
  
   //method to check if date2 is within the next 30 days of date1
   private static Boolean DateWithin30Days(Date date1, Date date2) {
       //check for date2 being in the past
           if( date2 < date1) { return false; }
      
           //check that date2 is within (>=) 30 days of date1
           Date date30Days = date1.addDays(30); //create a date 30 days away from date1
       if( date2 >= date30Days ) { return false; }
       else { return true; }
   }
   //method to return the end of the month of a given date
   private static Date SetEndOfMonthDate(Date date1) {
       Integer totalDays = Date.daysInMonth(date1.year(), date1.month());
       Date lastDay = Date.newInstance(date1.year(), date1.month(), totalDays);
       return lastDay;
   }
}

Second Create an TestVerifyDate Apex class:

@isTest
public class TestVerifyDate 
{
    static testMethod void testMethod1() 
    {
        Date d = VerifyDate.CheckDates(System.today(),System.today()+1);
        Date d1 = VerifyDate.CheckDates(System.today(),System.today()+60);
    }
}

// Create an Apex class named BankAcct. Give the BankAcct class three attributes: balance, acctName, and acctType. Include a method named makeDeposit to set the account balance.

public class BankAcct {
    private integer balance=0;
    public string acctName;
    //Declare a public string attribute named accttype
    public string accttype;
    //Declare a method, named makeDeposit, that accepts an integer named deposit
    //Within the method, add the deposit amount to the balance
    public void makeDeposit (integer deposit) {
    balance = balance + deposit;
    }
    //Declare a method, named getBalance, that returns an integer
    public integer getBalance() {
    //Return the balance attribute
    return balance;
    }
}

// 2nd. Create a class named CreateContactFromCan and a method named createContact.

public with sharing class CreateContactFromCan {
    public void createContact(){
    }
}

// 3rd. in debug, try this code:

//From the BankAcct class, instantiate an object named chkAcct
BankAcct chkAcct = new BankAcct();
//Set the accttype attribute of the chkAcct object to Checking
chkAcct.accttype = 'Checking';
//Set the acctName attribute of the chkAcct object to D.Castillo-Chk
chkAcct.acctName = 'D.Castillo-Chk';
//Invoke the makeDeposit method with 150 as the argument
chkAcct.makeDeposit(150);
System.debug(chkAcct.getBalance());

// Create an Apex class that returns a list of contacts based on two incoming parameters: the number of contacts to generate and the last name, which is common to all contacts. Do not insert the generated contact records into the database. 

public class RandomContactFactory {
       public static List<Contact> generateRandomContacts(Integer numContactsToGenerate, String FName) {

        List<Contact> contactList = new List<Contact>();
        for(Integer i=0;i<numContactsToGenerate;i++) {
            Contact c = new Contact(FirstName=FName + ' ' + i, LastName = 'Contact '+i);
            contactList.add(c);
            System.debug(c);
        }

        //insert contactList;

        System.debug(contactList.size());
        return contactList;
    }
}

// LEAD TRIGGER (VALIDATION) EXAMPLES

// if a new LEAD created or Updated and if 'Industry' filed is NULL; Give a warning

for (Lead Id: Trigger.new){
   if(String.isBlank(Id.Industry)){
      Id.addError('Your Industry filed is EMPTY. Please fill it! ')
   }
}

// 2 different methods that return contact lists whose id is given

public class ContactSayilari {
    
    // id is verilen accountun contact ssayisini donunuz
    public static integer contactSayisi( String accId){
        integer contactSayisi;
        // kod yaziniz
        string gelenId=accId;
        if( accId.length() == 18  ){
           
            contactSayisi= [SELECT COUNT() FROM Contact WHERE AccountId = :gelenId];
            
        }else {
            contactSayisi=-1;
        }
      
        if(contactSayisi == null  ){
           
            contactSayisi = -1;
        }
        
        
        return contactSayisi;
    }
    
    // id is verilen accountun contact Listesini donunuz
     public static List<contact> contactListesi( id accId){
        
        List<contact> cntList = new List<contact>();
         // koda yaziniz
         
         
         
         return cntList;
        
    }
    
    
}

in Test class:

@isTest
public class ContactSayilariTest2 {
    
    
    @isTest
    Private Static Void contactSayisiTest(){
      Account acc = new Account();
        acc.Name = 'XXX';
        insert acc;
        
      Contact cnt = new Contact();
        cnt.LastName = 'zz contatc of ' + acc.Name; 
        cnt.AccountId = acc.id;
       insert cnt; 
        
      integer sonuc= ContactSayilari.contactSayisi(acc.id);
      system.assertEquals(2, sonuc, ' burlington textile contact sayisi 1 dir'); 
        
        
    }
    
    
    
    
}
