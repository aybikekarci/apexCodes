// If you create a new account and it is left empty, we will put a validation rule that prevents it from being left empty and give a message

trigger AccountPhone on Account (before insert) {
    for (Account acc : trigger.new){
        if(String.isBlank(acc.phone)){
            acc.addError('Please, enter a phone number');
        }
    }
}

// If the source field left empty, automatically call it from the system

trigger LeadTrigger on Lead (before insert, before update) {
     
    for(Lead w : Trigger.new) {
        
        if(String.isBlank(w.LeadSource)) {
            w.LeadSource = 'Other';
        }
        
        if(String.isBlank(w.Industry)) {
            w.addError('The industry field cannot be blank');
        }
    }
}

// If the ownership in the newly created account is empty, you can set it to private with the trigger, and if a new update is made, this time the ownership in the existing account will be set to public.

trigger AccountOwnership on Account (before insert, before update) {
    if (Trigger.isBefore) {
        if (Trigger.isInsert) {
            for (Account acc : Trigger.new) {
                if (String.isBlank(acc.Ownership)) {
                    acc.Ownership = 'Private';
                }
            }
        }

        if (Trigger.isUpdate) {
            for (Account acc : Trigger.new) {
                if (String.isBlank(acc.Ownership)) {
                    acc.Ownership = 'Public';
                }
            }
        }
    }
}

// If the account is updated and the annual revenue exceeds 500000, a new opportunity will be created.

trigger CreateOpp on Account (after update) {
    List<Opportunity> oppList = new List<Opportunity>();

    for (Account acc : Trigger.new) {
        // Check if AnnualRevenue has been updated
        if (acc.AnnualRevenue != Trigger.oldMap.get(acc.Id).AnnualRevenue) {
            // Check if AnnualRevenue is greater than 5000000
            if (acc.AnnualRevenue > 5000000) {
                Opportunity opp = new Opportunity();
                opp.Name = acc.Name;
                opp.AccountId = acc.Id;
                opp.StageName = 'Prospecting';
                opp.CloseDate = System.today().addMonths(1);
                oppList.add(opp);
            }
        }
    }
}

sets an accountâ€™s Shipping Postal Code to match the Billing Postal Code if the Match Billing Address option is selected. Fire the trigger before inserting an account or updating an account.

trigger AccountAddressTrigger on Account (before insert, before update) { 
    for(Account a: Trigger.New){ 

        if(a.Match_Billing_Address__c == true && a.BillingPostalCode!= null){ 
            a.ShippingPostalCode=a.BillingPostalCode; 
            } 
        } 
}

// BUILDING THE ABOVE EXAMPLE WITH APEX CLASS AND HANDLER:

Public class CreateOppHandler {

	Public static void myOpp( List <Account>newAccount, Map<Id, Account> oldAccountMap){

		    List<Opportunity> oppList = new List<Opportunity>();

    for (Account acc : newAccount) {
        if (acc.AnnualRevenue != oldAccountMap.get(acc.Id).AnnualRevenue) {

            if (acc.AnnualRevenue > 5000000) {
                Opportunity opp = new Opportunity();
                opp.Name = acc.Name;
                opp.AccountId = acc.Id;
                opp.StageName = 'Prospecting';
                opp.CloseDate = System.today().addMonths(1);
                oppList.add(opp);
            }
        }
    }


}
}

// calling a handler trigger:

trigger CreateOpp on Account (after update) {

	CreateOppHandler.myOpp(Trigger.new, trigger.oldMap);
}

// when a new LEAD is created assign 'EDUCATION' if industry field is NULL, if Lead is updated , assign Education if industry field is NULL.

trigger LeadTrigger on Lead (before insert , before update , before delete , after insert , after update, after delete, after undelete ) {
    
    SWITCH on Trigger.operationType {
        
        WHEN BEFORE_INSERT  {
            LeadTriggerHandler.industryControl(list<lead> leadList); 

        }
        WHEN BEFORE_UPDATE  {  
            for(lead NewLd : Trigger.new){
                if(newLd.Industry == null){ // String.isBlanck(newLd.Industry)
                    newLd.Industry='Education'
                }
            }
        }
    }   
}

in Handler class: 

public class LeadTriggerHandler {
    public static VOID industryControl(list<lead> leadList){
            for(lead NewLd : leadList){ 
                if(newLd.Industry == null){
                    newLd.Industry='Education'
                }
            }        
    }
}

