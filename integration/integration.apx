// Accessing records sent from Postman with usind Delete and Body method via Salesforce

    @HttpDelete
    global static VOID doDelete() {
        RestRequest req = RestContext.request;
        system.debug('req.requestBody >>' +req.requestBody.toString()); // restrequest icinde body var
        system.debug('req.params >> ' +req.params.toString());
        
        // req.params >> {fdfdssfdg, afdgadf};

    }

// after this process, Deserialization of JSON format

    Map<String,Object> inBody= (Map<String,Object>)JSON.deserializeUntyped(req.requestBody.toString()); 
        
        for(string str: inBody.keySet()){
            system.debug(str + ' >>> ' + inBody.get(str));
        } 

// Create an Apex class that calls a REST endpoint to return the name of an animal, write unit tests that achieve 100% code coverage for the class using a mock response, and run your Apex tests. 

// in AnimalLocator:

public class AnimalLocator {
        public static String getAnimalNameById(Integer x){
        Http http = new Http();
        HttpRequest req = new HttpRequest();
        req.setEndpoint('https://th-apex-http-callout.herokuapp.com/animals/' + x);
        req.setMethod('GET');
        Map<String, Object> animal= new Map<String, Object>();
        HttpResponse res = http.send(req);
            if (res.getStatusCode() == 200) {
        Map<String, Object> results = (Map<String, Object>)JSON.deserializeUntyped(res.getBody());
      animal = (Map<String, Object>) results.get('animal');
        }
    return (String)animal.get('name');
    }
}

// in AnimalLocatorTest:

@isTest
private class AnimalLocatorTest{
    @isTest static void AnimalLocatorMock1() {
        Test.setMock(HttpCalloutMock.class, new AnimalLocatorMock());
        string result = AnimalLocator.getAnimalNameById(3);
        String expectedResult = 'chicken';
        System.assertEquals(result,expectedResult );
    }
}

// in AnimalLocatorMock class:

@isTest
global class AnimalLocatorMock implements HttpCalloutMock {
     // Implement this interface method
    global HTTPResponse respond(HTTPRequest request) {
        // Create a fake response
        HttpResponse response = new HttpResponse();
        response.setHeader('Content-Type', 'application/json');
        response.setBody('{"animals": ["majestic badger", "fluffy bunny", "scary bear", "chicken", "mighty moose"]}');
        response.setStatusCode(200);
        return response; 
    }
}


