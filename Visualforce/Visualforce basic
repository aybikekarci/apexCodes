    // Visualforce basic

    // file -> visualforce page -> open 

    <apex:page showHeader="false" sideBar="false" > // 
      <apex:image url="https://developer.salesforce.com/files/salesforce-developer-network-logo.png"/> // url ile resim koyma kodu 
    </apex:page>

    // Anything inside the {! } delimiters is evaluated and dynamically replaced when the page is rendered or when the value is used. Whitespace is ignored.

    // information about the logged-in user in a global variable called $User

    // can access fields of the $User global variable (and any others) using an expression of the following form: {! $GlobalName.fieldName }.

    ({! IF($User.isActive, $User.Username, 'inactive') }) // isActive is another field available on the $User global variable. It’s a Boolean field that’s true if the user is active, and false if they’ve been deactivated.

   // Using the Contact standard controller, create a Visualforce page that displays a Contact's First Name, Last Name and the Email address of the Contact's Owner.

    <apex:page standardController="Contact"> // standard controller for accounts to the page, and then reference account fields to display a record’s data
        <apex:pageBlock title="Contact Summary">
            <apex:pageBlockSection>
                First Name: {! Contact.FirstName } <br/>
                Last Name: {! Contact.LastName } <br/>
                Owner Email: {! Contact.Owner.Email } <br/>
            </apex:pageBlockSection>
        </apex:pageBlock>
    </apex:page>

// OUTPUTFIELD

// When you need even more control over your page layout, you can add fields individually. The <apex:outputField> component is designed for doing exactly that.

// Create a page that displays a subset of Opportunity fields using apex:outputField components. Bind the Name, Amount, Close Date and Account Name fields to the apex:outputField components.

<apex:page standardController="Opportunity">
        <apex:outputField value="{! Opportunity.Name }"/>
        <apex:outputField value="{! Opportunity.Amount }"/>
        <apex:outputField value="{! Opportunity.CloseDate }"/>
        <apex:outputField value="{! Opportunity.Account.Name }"/>
</apex:page>

// INPUTFIELD

// <apex:inputField> displays errors for its own field, but for a longer form it’s a nice touch to list all of the page’s errors in one place at the top of the page.

// <apex:inputField> can be used to capture user input for any standard or custom object field, and respects any metadata that is set on the field definition, such as whether the field is required or unique, or whether the current user has permission to view or edit it.

// Using the Visualforce apex:form component, create a page that inserts a Contact record based on First Name, Last Name and Email. After submitting the form, the user should be redirected to the detail page of the new Contact record.

<apex:page standardController="Contact">
	<apex:form>
    	    <apex:pageBlock title="Edit Contact">
        <apex:pageBlockSection>
            <apex:inputField value="{! Contact.FirstName }"/>
            <apex:inputField value="{! Contact.LastName }"/>
            <apex:inputField value="{! Contact.Email }"/>
        </apex:pageBlockSection>
        <apex:pageBlockButtons> // when you use input components within <apex:pageBlock> and <apex:pageBlockSection> tags they adopt the platform visual styling.
            <apex:commandButton action="{! save }" value="Save" /> 
        </apex:pageBlockButtons>
        </apex:pageBlock>
    </apex:form>
</apex:page>

// RECORDSETVAR

//  The recordSetVar sets the name of the variable to be created with the collection of records, here, {! contacts }. By convention, this variable is usually named the plural of the object name. 

// Use a standard list controller to display a list of account names that link to their respective record pages.

    <apex:page standardController="Account" recordSetVar="accounts">
		<apex:repeat var="a" value="{!accounts}">

        	<li> //Nest a <li> list item HTML element inside the apex:repeat component.

            	<apex:outputLink value="/{!a.Id}"> // To link the URL of an account’s record detail page, set the value attribute of the apex:outputLink to /{!a.id}

                <apex:outputText value="/{!a.Name}"></apex:outputText>
                </apex:outputLink>
            </li>
        </apex:repeat>
    </apex:page>

//STATIC RESOURCES 

// in setup , home , search static resources , new, and upload your file, later go to your develop page. 

// Upload the specified zip file as a static resource and display an image from the file on a Visualforce page.

        <apex:page >
            <apex:image alt="eye" title="eye"
                url="{!URLFOR($Resource.vfimagetest, 'cats/kitten1.jpg')}"/>
        </apex:page>
